//### This file created by BYACC 1.8(/Java extension  1.13)
//### Java capabilities added 7 Jan 97, Bob Jamison
//### Updated : 27 Nov 97  -- Bob Jamison, Joe Nieten
//###           01 Jan 98  -- Bob Jamison -- fixed generic semantic constructor
//###           01 Jun 99  -- Bob Jamison -- added Runnable support
//###           06 Aug 00  -- Bob Jamison -- made state variables class-global
//###           03 Jan 01  -- Bob Jamison -- improved flags, tracing
//###           16 May 01  -- Bob Jamison -- added custom stack sizing
//###           04 Mar 02  -- Yuval Oren  -- improved java performance, added options
//###           14 Mar 02  -- Tomas Hurka -- -d support, static initializer workaround
//###           14 Sep 06  -- Keltin Leung-- ReduceListener support, eliminate underflow report in error recovery
//### Please send bug reports to tom@hukatronic.cz
//### static char yysccsid[] = "@(#)yaccpar	1.8 (Berkeley) 01/20/90";






//#line 11 "Parser.y"
package decaf.frontend;

import decaf.tree.Tree;
import decaf.tree.Tree.*;
import decaf.error.*;
import java.util.*;
//#line 25 "Parser.java"
interface ReduceListener {
  public boolean onReduce(String rule);
}




public class Parser
             extends BaseParser
             implements ReduceListener
{

boolean yydebug;        //do I want debug output?
int yynerrs;            //number of errors so far
int yyerrflag;          //was there an error?
int yychar;             //the current working character

ReduceListener reduceListener = null;
void yyclearin ()       {yychar = (-1);}
void yyerrok ()         {yyerrflag=0;}
void addReduceListener(ReduceListener l) {
  reduceListener = l;}


//########## MESSAGES ##########
//###############################################################
// method: debug
//###############################################################
void debug(String msg)
{
  if (yydebug)
    System.out.println(msg);
}

//########## STATE STACK ##########
final static int YYSTACKSIZE = 500;  //maximum stack size
int statestk[] = new int[YYSTACKSIZE]; //state stack
int stateptr;
int stateptrmax;                     //highest index of stackptr
int statemax;                        //state when highest index reached
//###############################################################
// methods: state stack push,pop,drop,peek
//###############################################################
final void state_push(int state)
{
  try {
		stateptr++;
		statestk[stateptr]=state;
	 }
	 catch (ArrayIndexOutOfBoundsException e) {
     int oldsize = statestk.length;
     int newsize = oldsize * 2;
     int[] newstack = new int[newsize];
     System.arraycopy(statestk,0,newstack,0,oldsize);
     statestk = newstack;
     statestk[stateptr]=state;
  }
}
final int state_pop()
{
  return statestk[stateptr--];
}
final void state_drop(int cnt)
{
  stateptr -= cnt; 
}
final int state_peek(int relative)
{
  return statestk[stateptr-relative];
}
//###############################################################
// method: init_stacks : allocate and prepare stacks
//###############################################################
final boolean init_stacks()
{
  stateptr = -1;
  val_init();
  return true;
}
//###############################################################
// method: dump_stacks : show n levels of the stacks
//###############################################################
void dump_stacks(int count)
{
int i;
  System.out.println("=index==state====value=     s:"+stateptr+"  v:"+valptr);
  for (i=0;i<count;i++)
    System.out.println(" "+i+"    "+statestk[i]+"      "+valstk[i]);
  System.out.println("======================");
}


//########## SEMANTIC VALUES ##########
//## **user defined:SemValue
String   yytext;//user variable to return contextual strings
SemValue yyval; //used to return semantic vals from action routines
SemValue yylval;//the 'lval' (result) I got from yylex()
SemValue valstk[] = new SemValue[YYSTACKSIZE];
int valptr;
//###############################################################
// methods: value stack push,pop,drop,peek.
//###############################################################
final void val_init()
{
  yyval=new SemValue();
  yylval=new SemValue();
  valptr=-1;
}
final void val_push(SemValue val)
{
  try {
    valptr++;
    valstk[valptr]=val;
  }
  catch (ArrayIndexOutOfBoundsException e) {
    int oldsize = valstk.length;
    int newsize = oldsize*2;
    SemValue[] newstack = new SemValue[newsize];
    System.arraycopy(valstk,0,newstack,0,oldsize);
    valstk = newstack;
    valstk[valptr]=val;
  }
}
final SemValue val_pop()
{
  return valstk[valptr--];
}
final void val_drop(int cnt)
{
  valptr -= cnt;
}
final SemValue val_peek(int relative)
{
  return valstk[valptr-relative];
}
//#### end semantic value section ####
public final static short VOID=257;
public final static short BOOL=258;
public final static short INT=259;
public final static short STRING=260;
public final static short CLASS=261;
public final static short NULL=262;
public final static short EXTENDS=263;
public final static short THIS=264;
public final static short WHILE=265;
public final static short FOR=266;
public final static short IF=267;
public final static short ELSE=268;
public final static short RETURN=269;
public final static short BREAK=270;
public final static short NEW=271;
public final static short PRINT=272;
public final static short READ_INTEGER=273;
public final static short READ_LINE=274;
public final static short LITERAL=275;
public final static short IDENTIFIER=276;
public final static short AND=277;
public final static short OR=278;
public final static short STATIC=279;
public final static short INSTANCEOF=280;
public final static short LESS_EQUAL=281;
public final static short GREATER_EQUAL=282;
public final static short EQUAL=283;
public final static short NOT_EQUAL=284;
public final static short SCOPY=285;
public final static short SEALED=286;
public final static short SERIESE_OP=287;
public final static short VAR=288;
public final static short ORIGIN=289;
public final static short DOUBLEPLUS=290;
public final static short DEFAULT=291;
public final static short IN=292;
public final static short FOREACH=293;
public final static short UMINUS=294;
public final static short EMPTY=295;
public final static short YYERRCODE=256;
final static short yylhs[] = {                           -1,
    0,    1,    1,    3,    4,    5,    5,    5,    5,    5,
    5,    2,    2,    6,    6,    7,    7,    7,    9,    9,
   10,   10,    8,    8,   11,   12,   12,   13,   13,   13,
   13,   13,   13,   13,   13,   13,   13,   13,   13,   23,
   26,   26,   24,   24,   22,   27,   27,   27,   28,   14,
   14,   14,   31,   31,   29,   29,   29,   30,   25,   25,
   25,   25,   25,   25,   25,   25,   25,   25,   25,   25,
   25,   25,   25,   25,   25,   25,   25,   25,   25,   25,
   25,   25,   25,   25,   25,   25,   25,   25,   25,   34,
   34,   33,   33,   33,   35,   35,   35,   32,   32,   36,
   36,   16,   17,   20,   15,   37,   37,   18,   18,   19,
   21,
};
final static short yylen[] = {                            2,
    1,    2,    1,    2,    2,    1,    1,    1,    1,    2,
    3,    6,    7,    2,    0,    2,    2,    0,    1,    0,
    3,    1,    7,    6,    3,    2,    0,    1,    2,    1,
    1,    1,    2,    2,    2,    1,    1,    1,    1,    8,
    2,    0,    2,    2,    4,    3,    1,    0,    3,    3,
    1,    0,    2,    0,    2,    4,    2,    5,    1,    1,
    1,    3,    3,    3,    3,    3,    3,    3,    3,    3,
    3,    3,    3,    3,    3,    3,    2,    2,    3,    3,
    1,    4,    5,    6,    5,    3,    6,    6,    8,    2,
    0,    1,    1,    3,    3,    1,    0,    1,    0,    3,
    1,    5,    9,    1,    6,    2,    0,    2,    1,    4,
    6,
};
final static short yydefred[] = {                         0,
    0,    0,    0,    0,    3,    0,    0,    2,    0,    0,
    0,   14,   18,    0,    0,   18,    7,    8,    6,    9,
    0,    0,   12,   16,    0,    0,   17,    0,   10,    0,
    4,    0,    0,   13,    0,    0,   11,    0,   22,    0,
    0,    0,    0,    5,    0,    0,    0,   27,   24,   21,
   23,    0,   93,   81,    0,    0,    0,    0,  104,    0,
    0,    0,    0,   92,    0,    0,    0,    0,    0,   25,
    0,    0,    0,   28,   36,   26,    0,   30,   31,   32,
    0,    0,    0,   37,   38,   39,    0,    0,    0,    0,
   61,    0,    0,    0,    0,    0,   59,   60,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,   57,    0,   29,   33,   34,   35,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,   53,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,   47,    0,    0,    0,    0,   79,   80,    0,
    0,   76,    0,    0,   94,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,   45,    0,   82,    0,    0,  110,    0,    0,    0,
    0,   95,    0,   43,   44,    0,    0,    0,    0,    0,
  102,    0,    0,   49,   46,   83,    0,    0,   85,    0,
   96,    0,    0,    0,    0,   58,    0,    0,  105,   84,
    0,  111,    0,    0,    0,   87,    0,  106,    0,    0,
    0,    0,    0,    0,   89,   40,  103,
};
final static short yydgoto[] = {                          3,
    4,    5,   74,   25,   40,   10,   15,   27,   41,   42,
   75,   52,   76,   77,   78,   79,   80,   81,   82,   83,
   84,   85,   86,  159,   87,  224,  142,  143,   97,   98,
   90,  199,   91,  230,  111,  147,  219,
};
final static short yysindex[] = {                      -230,
 -240, -215,    0, -230,    0, -216, -214,    0, -206,  -45,
 -216,    0,    0,  -39,  256,    0,    0,    0,    0,    0,
 -203,  -47,    0,    0,   35,  -89,    0,  339,    0,  -87,
    0,   56,    7,    0,   67,  -47,    0,  -47,    0,  -83,
   69,   53,   71,    0,  -15,  -47,  -15,    0,    0,    0,
    0,    4,    0,    0,   73,   74,  -18,  104,    0,  362,
   77,   79,   81,    0,   82,  104,  104,   66,  104,    0,
   83, -152,   88,    0,    0,    0,   72,    0,    0,    0,
   75,   76,   80,    0,    0,    0, 1293,   84,    0, -143,
    0,  104,  104,  104,  104, 1293,    0,    0,   96,   51,
  104,   97,  102,  104,  -23,  -23, -129,  842,  868,    0,
  -26, -128,    0,  136,    0,    0,    0,    0,  104,  104,
  104,  104,  104,  104,  104,  104,  104,  104,  104,  104,
  104,    0,  104,  104,  104,  104,  106,  894,   92,  920,
  941, -108,    0,  112,   85, 1293,   13,    0,    0,  963,
  113,    0, -121,  -66,    0,  114, -120,  -82, -133,  636,
 1328,   -4,   -4,  -32,  -32,   29,   29,  -23,  -23,  -23,
   -4,   -4,  568,   18,   -4, 1293,  104,   41,  104,   41,
   41,    0,  104,    0,  984,  104,    0, -116,  104, -119,
  -66,    0,  104,    0,    0,  104, -117,  104,  121,  128,
    0, 1006,  -93,    0,    0,    0, 1293,  139,    0,  104,
    0, 1044, 1145,  104, 1068,    0,  104,   41,    0,    0,
 1256,    0,  104,  140,  -23,    0,  147,    0,  104,   98,
 1293,   41,   41, 1293,    0,    0,    0,
};
final static short yyrindex[] = {                         0,
    0,    0,    0,  177,    0,   93,    0,    0,    0,    0,
   93,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  131,    0,    0,    0,  151,    0,  151,    0,    0,
    0,  157,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  -53,    0,    0,    0,    0,    0,  -30,    0,    0,
    0,    0,    0,    0,    0,  -76,  -76,  -76,  -41,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0, 1317,  818,    0,
    0,  -76,  -53,  -76, -124,  149,    0,    0,    0,    0,
  -76,    0,    0,  -76,  374,  410,    0,    0,    0,  542,
    0,    0,    0,    0,    0,    0,    0,    0,  -76,  -76,
  -76,  -76,  -76,  -76,  -76,  -76,  -76,  -76,  -76,  -76,
  -76,    0,  -76,  -76,  -76,  -76,  124,    0,    0,    0,
    0,    0,    0,    0,  -76,   36,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  536,
   57, 1374, 1448,  888, 1348, 1354, 1395,  436,  463,  489,
 1469, 1491,    0, 1219, 1421,   -6,  -20,  -53,  -76,  -53,
  -53,    0,  -76,    0,    0,  -76,    0,    0,  -76,    0,
  -24,    0,  -76,    0,    0,  -76,  160,  -76,    0,  158,
    0,    0,  -33,    0,    0,    0,   38,    0,    0,  -76,
    0,    0,  189,  -76,    0,    0,  -17,  -53,    0,    0,
  152,    0,  -76,    0,  516,    0,    0,    0,  -76,    0,
  203,  -53,  -53,  155,    0,    0,    0,
};
final static short yygindex[] = {                         0,
    0,  263,   17,   47,   12,  261,  264,    0,  243,    0,
   44,    0, -130,  -77,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0, 1672,    0,    0,   99,  310,  531,
    0,    0,  -50,    0,    0,  110,    0,
};
final static int YYTABLESIZE=1901;
static short yytable[];
static { yytable();}
static void yytable(){
yytable = new short[]{                        107,
   48,   33,   97,   33,  129,   52,  107,   33,   33,  127,
  125,  107,  126,  132,  128,  139,  182,  154,  110,   97,
   99,   94,  132,   52,  191,  107,   26,  131,  109,  130,
    1,   24,  129,   30,   50,    6,   67,  127,  125,   26,
  126,  132,  128,   68,   24,    7,    9,  201,   66,  203,
  204,   97,   50,  187,  129,    2,  186,  107,  133,  127,
  125,   11,  126,  132,  128,  129,  155,  133,   97,   12,
  127,  100,   29,   67,  132,  128,  101,   13,  100,  101,
   68,  100,   39,   16,   39,   66,  133,  228,   49,  107,
   51,  107,   50,   31,   69,   36,   46,   75,   67,   37,
   75,  236,  237,  192,   95,   68,   38,   48,  133,   45,
   66,   47,   92,   93,   75,   75,  101,   67,  102,  133,
  103,  104,  112,  113,   68,  158,   48,  114,   70,   66,
  115,   69,  137,  116,  117,  144,   67,  148,  118,  227,
  211,  145,  149,   68,  136,  177,  151,  156,   66,   75,
  179,   54,  184,  189,  190,  194,   69,  193,  196,  208,
   55,  216,   48,   48,   55,   55,   55,   55,   55,   55,
   55,  186,  210,  214,  218,   69,    1,   37,  183,  220,
  232,   55,   55,   55,   55,   55,   32,  233,   35,    5,
  235,   20,   44,  195,   69,   53,   56,   19,   98,   54,
   56,   56,   56,   56,   56,   56,   56,  108,   64,   17,
   18,   19,   20,   21,   55,   15,   55,   56,   56,   56,
   56,   56,   54,  107,  107,  107,  107,  107,  107,   42,
  107,  107,  107,  107,   54,  107,  107,  107,  107,  107,
  107,  107,  107,   41,   91,   54,  107,   90,  121,  122,
   56,  107,   56,  107,  107,   54,  134,  135,   54,  107,
   17,   18,   19,   20,   21,   53,    8,   54,   55,   56,
   57,   14,   58,   59,   60,   61,   62,   63,   64,   28,
   43,  205,    0,   65,  134,  135,  200,    0,   71,    0,
    0,   72,    0,    0,    0,    0,   73,   17,   18,   19,
   20,   21,   53,    0,   54,   55,   56,   57,    0,   58,
   59,   60,   61,   62,   63,   64,    0,    0,    0,    0,
   65,   75,   75,   75,    0,   71,  107,   53,   72,   54,
    0,    0,    0,   73,   75,    0,   60,    0,   62,   63,
   64,    0,    0,    0,    0,   65,   53,    0,   54,    0,
    0,    0,    0,   72,    0,   60,    0,   62,   63,   64,
    0,   88,    0,    0,   65,   53,    0,   54,    0,    0,
    0,    0,   72,    0,   60,    0,   62,   63,   64,    0,
   23,    0,    0,   65,    0,    0,    0,    0,   55,   55,
   55,   72,   17,   18,   19,   20,   21,    0,    0,    0,
   55,   55,   88,    0,   55,   55,   55,   55,    0,    0,
   77,    0,   55,   55,   77,   77,   77,   77,   77,    0,
   77,    0,    0,  157,   56,   56,   56,    0,    0,    0,
    0,   77,   77,   77,    0,   77,   56,   56,    0,    0,
   56,   56,   56,   56,    0,    0,   78,    0,   56,   56,
   78,   78,   78,   78,   78,    0,   78,    0,    0,    0,
    0,    0,    0,   34,    0,    0,   77,   78,   78,   78,
    0,   78,   65,    0,    0,    0,   65,   65,   65,   65,
   65,    0,   65,    0,    0,    0,    0,   88,    0,   88,
   88,    0,    0,   65,   65,   65,    0,   65,    0,   66,
    0,    0,   78,   66,   66,   66,   66,   66,    0,   66,
    0,    0,   17,   18,   19,   20,   21,    0,    0,    0,
   66,   66,   66,    0,   66,   67,   88,   88,   65,   67,
   67,   67,   67,   67,   22,   67,    0,    0,    0,    0,
    0,   88,   88,    0,    0,    0,   67,   67,   67,    0,
   67,    0,   88,    0,    0,   66,   88,   88,   88,   88,
   88,    0,   88,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,   88,   88,   88,   74,   88,   61,   74,
    0,   67,   89,   61,   61,   96,   61,   61,   61,    0,
    0,    0,    0,   74,   74,   17,   18,   19,   20,   21,
    0,   61,    0,   61,  129,    0,    0,    0,   88,  127,
  125,    0,  126,  132,  128,    0,    0,   22,   17,   18,
   19,   20,   21,   89,    0,  198,    0,  131,   74,  130,
    0,    0,   61,    0,   96,    0,    0,   99,   77,   77,
   77,    0,    0,    0,    0,    0,    0,    0,    0,    0,
   77,   77,    0,    0,   77,   77,   77,   77,  133,    0,
  197,    0,   77,   77,    0,    0,    0,    0,    0,    0,
    0,    0,  129,    0,   78,   78,   78,  127,  125,    0,
  126,  132,  128,    0,    0,    0,   78,   78,    0,    0,
   78,   78,   78,   78,    0,  131,    0,  130,   78,   78,
   65,   65,   65,    0,    0,    0,    0,    0,   89,    0,
   89,   89,   65,   65,    0,    0,   65,   65,   65,   65,
    0,    0,    0,    0,   65,   65,  133,   66,   66,   66,
    0,    0,    0,    0,    0,    0,    0,    0,    0,   66,
   66,    0,    0,   66,   66,   66,   66,   89,   89,    0,
    0,   66,   66,   67,   67,   67,    0,    0,    0,    0,
    0,    0,   89,   89,    0,   67,   67,    0,    0,   67,
   67,   67,   67,    0,    0,    0,    0,   67,   67,    0,
   88,   88,   88,    0,    0,    0,    0,    0,    0,    0,
    0,    0,   88,   88,    0,    0,   88,   88,   88,   88,
   74,   74,   74,    0,   88,   88,    0,   61,    0,    0,
    0,    0,   74,   74,    0,    0,    0,    0,   61,   61,
    0,    0,   61,   61,   61,   61,    0,    0,    0,    0,
   61,   61,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  119,  120,    0,    0,  121,  122,
  123,  124,    0,    0,   60,    0,  134,  135,   51,   60,
   60,    0,   60,   60,   60,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,   51,   60,  129,   60,
    0,    0,  152,  127,  125,    0,  126,  132,  128,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  131,    0,  130,  129,    0,    0,    0,   60,  127,
  125,    0,  126,  132,  128,    0,  121,  122,  123,  124,
    0,    0,    0,    0,  134,  135,    0,  131,   68,  130,
  129,   68,  133,    0,  178,  127,  125,    0,  126,  132,
  128,    0,    0,    0,    0,   68,   68,    0,    0,    0,
    0,    0,    0,  131,    0,  130,  129,    0,  133,    0,
  180,  127,  125,    0,  126,  132,  128,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  129,    0,  131,
   68,  130,  127,  125,  133,  126,  132,  128,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  181,  129,
  131,    0,  130,    0,  127,  125,  188,  126,  132,  128,
  133,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  129,    0,  131,    0,  130,  127,  125,    0,  126,  132,
  128,  133,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  129,  131,    0,  130,    0,  127,  125,    0,
  126,  132,  128,  133,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  217,  131,    0,  130,    0,    0,
    0,    0,    0,    0,  133,    0,  206,    0,    0,    0,
  129,    0,    0,    0,  222,  127,  125,    0,  126,  132,
  128,    0,    0,    0,   60,   60,  133,    0,   60,   60,
   60,   60,    0,  131,  129,  130,   60,   60,    0,  127,
  125,    0,  126,  132,  128,    0,    0,    0,  119,  120,
    0,    0,  121,  122,  123,  124,    0,  131,    0,  130,
  134,  135,    0,  153,  133,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  119,  120,    0,    0,  121,  122,
  123,  124,   68,   68,   68,    0,  134,  135,  133,    0,
  226,    0,    0,    0,   68,   68,    0,    0,    0,    0,
  119,  120,    0,    0,  121,  122,  123,  124,    0,    0,
    0,  129,  134,  135,    0,    0,  127,  125,    0,  126,
  132,  128,    0,    0,    0,    0,  119,  120,    0,    0,
  121,  122,  123,  124,  131,    0,  130,    0,  134,  135,
    0,    0,    0,    0,    0,    0,    0,  119,  120,    0,
    0,  121,  122,  123,  124,    0,    0,    0,    0,  134,
  135,    0,    0,    0,    0,  133,    0,    0,    0,  119,
  120,    0,    0,  121,  122,  123,  124,    0,    0,    0,
    0,  134,  135,    0,    0,    0,    0,    0,    0,   86,
  119,  120,   86,    0,  121,  122,  123,  124,    0,    0,
    0,    0,  134,  135,    0,    0,   86,   86,   86,    0,
   86,    0,  119,  120,    0,    0,  121,  122,  123,  124,
    0,    0,  129,    0,  134,  135,    0,  127,  125,    0,
  126,  132,  128,    0,    0,    0,    0,    0,    0,    0,
    0,   86,    0,    0,    0,  131,    0,  130,    0,    0,
  119,  120,    0,    0,  121,  122,  123,  124,    0,  129,
    0,    0,  134,  135,  127,  125,    0,  126,  132,  128,
    0,    0,    0,    0,  119,  120,  133,    0,  121,  122,
  123,  124,  131,   59,  130,    0,  134,  135,   59,   59,
    0,   59,   59,   59,  129,    0,    0,    0,    0,  127,
  125,    0,  126,  132,  128,    0,   59,    0,   59,    0,
    0,    0,    0,  133,    0,    0,    0,  131,   69,  130,
    0,   69,    0,    0,   63,    0,   63,   63,   63,    0,
    0,    0,    0,    0,    0,   69,   69,   59,    0,  223,
    0,   63,   63,   63,   72,   63,    0,   72,  133,    0,
    0,  119,  120,    0,    0,  121,  122,  123,  124,    0,
    0,   72,   72,  134,  135,   64,    0,   64,   64,   64,
   69,    0,    0,    0,    0,    0,   63,    0,    0,    0,
    0,    0,   64,   64,   64,    0,   64,    0,    0,    0,
    0,   62,    0,    0,   62,    0,   72,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,   62,   62,
   62,    0,   62,   86,   86,   86,    0,   64,   73,    0,
    0,   73,    0,    0,    0,   86,   86,    0,    0,   86,
   86,   86,   86,    0,    0,   73,   73,   86,   86,   71,
    0,    0,   71,   62,    0,    0,    0,    0,    0,    0,
    0,    0,  229,    0,    0,    0,   71,   71,    0,    0,
    0,   70,  119,  120,   70,    0,  121,  122,  123,  124,
   73,    0,    0,    0,  134,  135,    0,    0,   70,   70,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,   71,    0,    0,    0,    0,    0,    0,    0,  119,
  120,    0,    0,  121,  122,  123,  124,    0,    0,    0,
    0,  134,  135,   70,    0,    0,    0,    0,    0,    0,
    0,    0,    0,   59,   59,    0,    0,   59,   59,   59,
   59,    0,    0,    0,  119,   59,   59,    0,  121,  122,
  123,  124,   69,   69,   69,    0,  134,  135,   63,   63,
   63,    0,    0,    0,   69,   69,    0,    0,    0,    0,
   63,   63,    0,    0,   63,   63,   63,   63,   72,   72,
   72,    0,   63,   63,    0,    0,    0,    0,    0,    0,
   72,   72,    0,    0,    0,    0,   72,   72,    0,   64,
   64,   64,    0,    0,    0,    0,    0,    0,    0,    0,
    0,   64,   64,    0,    0,   64,   64,   64,   64,    0,
    0,    0,    0,   64,   64,   62,   62,   62,    0,    0,
    0,    0,    0,    0,    0,    0,    0,   62,   62,    0,
    0,   62,   62,   62,   62,    0,    0,    0,    0,    0,
    0,    0,   73,   73,   73,    0,    0,    0,    0,    0,
    0,    0,    0,    0,   73,   73,    0,    0,    0,   96,
   73,   73,    0,   71,   71,   71,    0,  105,  106,  108,
  109,    0,    0,    0,    0,   71,   71,    0,    0,    0,
    0,   71,   71,    0,    0,   70,   70,   70,    0,    0,
    0,    0,    0,  138,    0,  140,  141,   70,   70,    0,
    0,    0,  146,   70,   70,  150,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  160,  161,  162,  163,  164,  165,  166,  167,  168,  169,
  170,  171,  172,    0,  173,  174,  175,  176,    0,    0,
    0,    0,    0,    0,    0,    0,  185,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  146,    0,
  202,    0,    0,    0,  141,    0,    0,  207,    0,    0,
  209,    0,    0,    0,  212,    0,    0,  213,    0,  215,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  221,    0,    0,    0,  225,    0,    0,    0,    0,
    0,    0,    0,    0,  231,    0,    0,    0,    0,    0,
  234,
};
}
static short yycheck[];
static { yycheck(); }
static void yycheck() {
yycheck = new short[] {                         33,
  125,   91,   44,   91,   37,   59,   40,   91,   91,   42,
   43,   45,   45,   46,   47,   93,  125,   44,   69,   44,
   41,   40,   46,   41,   91,   59,   15,   60,   59,   62,
  261,   15,   37,   22,   41,  276,   33,   42,   43,   28,
   45,   46,   47,   40,   28,  261,  263,  178,   45,  180,
  181,   93,   59,   41,   37,  286,   44,   91,   91,   42,
   43,  276,   45,   46,   47,   37,   93,   91,   93,  276,
   42,   60,  276,   33,   46,   47,   41,  123,   41,   44,
   40,   44,   36,  123,   38,   45,   91,  218,   45,  123,
   47,  125,   46,   59,   91,   40,   44,   41,   33,   93,
   44,  232,  233,  154,  123,   40,   40,  123,   91,   41,
   45,   41,   40,   40,   58,   59,   40,   33,   40,   91,
   40,   40,   40,  276,   40,  114,  123,   40,  125,   45,
   59,   91,  276,   59,   59,   40,   33,   41,   59,  217,
  191,   91,   41,   40,   61,   40,  276,  276,   45,   93,
   59,  276,   41,   41,  276,  276,   91,   44,  292,  276,
   37,   41,  287,  123,   41,   42,   43,   44,   45,   46,
   47,   44,  292,  291,  268,   91,    0,   93,  287,   41,
   41,   58,   59,   60,   61,   62,  276,   41,  276,   59,
   93,   41,  276,  276,   91,  262,   37,   41,   41,  276,
   41,   42,   43,   44,   45,   46,   47,   59,  275,  257,
  258,  259,  260,  261,   91,  123,   93,   58,   59,   60,
   61,   62,  276,  257,  258,  259,  260,  261,  262,   41,
  264,  265,  266,  267,  276,  269,  270,  271,  272,  273,
  274,  275,  276,   41,   93,  276,  280,   93,  281,  282,
   91,  285,   93,  287,  288,  276,  289,  290,  276,  293,
  257,  258,  259,  260,  261,  262,    4,  264,  265,  266,
  267,   11,  269,  270,  271,  272,  273,  274,  275,   16,
   38,  183,   -1,  280,  289,  290,  177,   -1,  285,   -1,
   -1,  288,   -1,   -1,   -1,   -1,  293,  257,  258,  259,
  260,  261,  262,   -1,  264,  265,  266,  267,   -1,  269,
  270,  271,  272,  273,  274,  275,   -1,   -1,   -1,   -1,
  280,  265,  266,  267,   -1,  285,  261,  262,  288,  264,
   -1,   -1,   -1,  293,  278,   -1,  271,   -1,  273,  274,
  275,   -1,   -1,   -1,   -1,  280,  262,   -1,  264,   -1,
   -1,   -1,   -1,  288,   -1,  271,   -1,  273,  274,  275,
   -1,   52,   -1,   -1,  280,  262,   -1,  264,   -1,   -1,
   -1,   -1,  288,   -1,  271,   -1,  273,  274,  275,   -1,
  125,   -1,   -1,  280,   -1,   -1,   -1,   -1,  265,  266,
  267,  288,  257,  258,  259,  260,  261,   -1,   -1,   -1,
  277,  278,   93,   -1,  281,  282,  283,  284,   -1,   -1,
   37,   -1,  289,  290,   41,   42,   43,   44,   45,   -1,
   47,   -1,   -1,  288,  265,  266,  267,   -1,   -1,   -1,
   -1,   58,   59,   60,   -1,   62,  277,  278,   -1,   -1,
  281,  282,  283,  284,   -1,   -1,   37,   -1,  289,  290,
   41,   42,   43,   44,   45,   -1,   47,   -1,   -1,   -1,
   -1,   -1,   -1,  125,   -1,   -1,   93,   58,   59,   60,
   -1,   62,   37,   -1,   -1,   -1,   41,   42,   43,   44,
   45,   -1,   47,   -1,   -1,   -1,   -1,  178,   -1,  180,
  181,   -1,   -1,   58,   59,   60,   -1,   62,   -1,   37,
   -1,   -1,   93,   41,   42,   43,   44,   45,   -1,   47,
   -1,   -1,  257,  258,  259,  260,  261,   -1,   -1,   -1,
   58,   59,   60,   -1,   62,   37,  217,  218,   93,   41,
   42,   43,   44,   45,  279,   47,   -1,   -1,   -1,   -1,
   -1,  232,  233,   -1,   -1,   -1,   58,   59,   60,   -1,
   62,   -1,   37,   -1,   -1,   93,   41,   42,   43,   44,
   45,   -1,   47,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   58,   59,   60,   41,   62,   37,   44,
   -1,   93,   52,   42,   43,   44,   45,   46,   47,   -1,
   -1,   -1,   -1,   58,   59,  257,  258,  259,  260,  261,
   -1,   60,   -1,   62,   37,   -1,   -1,   -1,   93,   42,
   43,   -1,   45,   46,   47,   -1,   -1,  279,  257,  258,
  259,  260,  261,   93,   -1,   58,   -1,   60,   93,   62,
   -1,   -1,   91,   -1,   93,   -1,   -1,  276,  265,  266,
  267,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  277,  278,   -1,   -1,  281,  282,  283,  284,   91,   -1,
   93,   -1,  289,  290,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   37,   -1,  265,  266,  267,   42,   43,   -1,
   45,   46,   47,   -1,   -1,   -1,  277,  278,   -1,   -1,
  281,  282,  283,  284,   -1,   60,   -1,   62,  289,  290,
  265,  266,  267,   -1,   -1,   -1,   -1,   -1,  178,   -1,
  180,  181,  277,  278,   -1,   -1,  281,  282,  283,  284,
   -1,   -1,   -1,   -1,  289,  290,   91,  265,  266,  267,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  277,
  278,   -1,   -1,  281,  282,  283,  284,  217,  218,   -1,
   -1,  289,  290,  265,  266,  267,   -1,   -1,   -1,   -1,
   -1,   -1,  232,  233,   -1,  277,  278,   -1,   -1,  281,
  282,  283,  284,   -1,   -1,   -1,   -1,  289,  290,   -1,
  265,  266,  267,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  277,  278,   -1,   -1,  281,  282,  283,  284,
  265,  266,  267,   -1,  289,  290,   -1,  266,   -1,   -1,
   -1,   -1,  277,  278,   -1,   -1,   -1,   -1,  277,  278,
   -1,   -1,  281,  282,  283,  284,   -1,   -1,   -1,   -1,
  289,  290,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  277,  278,   -1,   -1,  281,  282,
  283,  284,   -1,   -1,   37,   -1,  289,  290,   41,   42,
   43,   -1,   45,   46,   47,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   59,   60,   37,   62,
   -1,   -1,   41,   42,   43,   -1,   45,   46,   47,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   60,   -1,   62,   37,   -1,   -1,   -1,   91,   42,
   43,   -1,   45,   46,   47,   -1,  281,  282,  283,  284,
   -1,   -1,   -1,   -1,  289,  290,   -1,   60,   41,   62,
   37,   44,   91,   -1,   41,   42,   43,   -1,   45,   46,
   47,   -1,   -1,   -1,   -1,   58,   59,   -1,   -1,   -1,
   -1,   -1,   -1,   60,   -1,   62,   37,   -1,   91,   -1,
   41,   42,   43,   -1,   45,   46,   47,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   37,   -1,   60,
   93,   62,   42,   43,   91,   45,   46,   47,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   58,   37,
   60,   -1,   62,   -1,   42,   43,   44,   45,   46,   47,
   91,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   37,   -1,   60,   -1,   62,   42,   43,   -1,   45,   46,
   47,   91,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   37,   60,   -1,   62,   -1,   42,   43,   -1,
   45,   46,   47,   91,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   59,   60,   -1,   62,   -1,   -1,
   -1,   -1,   -1,   -1,   91,   -1,   93,   -1,   -1,   -1,
   37,   -1,   -1,   -1,   41,   42,   43,   -1,   45,   46,
   47,   -1,   -1,   -1,  277,  278,   91,   -1,  281,  282,
  283,  284,   -1,   60,   37,   62,  289,  290,   -1,   42,
   43,   -1,   45,   46,   47,   -1,   -1,   -1,  277,  278,
   -1,   -1,  281,  282,  283,  284,   -1,   60,   -1,   62,
  289,  290,   -1,  266,   91,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  277,  278,   -1,   -1,  281,  282,
  283,  284,  265,  266,  267,   -1,  289,  290,   91,   -1,
   93,   -1,   -1,   -1,  277,  278,   -1,   -1,   -1,   -1,
  277,  278,   -1,   -1,  281,  282,  283,  284,   -1,   -1,
   -1,   37,  289,  290,   -1,   -1,   42,   43,   -1,   45,
   46,   47,   -1,   -1,   -1,   -1,  277,  278,   -1,   -1,
  281,  282,  283,  284,   60,   -1,   62,   -1,  289,  290,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  277,  278,   -1,
   -1,  281,  282,  283,  284,   -1,   -1,   -1,   -1,  289,
  290,   -1,   -1,   -1,   -1,   91,   -1,   -1,   -1,  277,
  278,   -1,   -1,  281,  282,  283,  284,   -1,   -1,   -1,
   -1,  289,  290,   -1,   -1,   -1,   -1,   -1,   -1,   41,
  277,  278,   44,   -1,  281,  282,  283,  284,   -1,   -1,
   -1,   -1,  289,  290,   -1,   -1,   58,   59,   60,   -1,
   62,   -1,  277,  278,   -1,   -1,  281,  282,  283,  284,
   -1,   -1,   37,   -1,  289,  290,   -1,   42,   43,   -1,
   45,   46,   47,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   93,   -1,   -1,   -1,   60,   -1,   62,   -1,   -1,
  277,  278,   -1,   -1,  281,  282,  283,  284,   -1,   37,
   -1,   -1,  289,  290,   42,   43,   -1,   45,   46,   47,
   -1,   -1,   -1,   -1,  277,  278,   91,   -1,  281,  282,
  283,  284,   60,   37,   62,   -1,  289,  290,   42,   43,
   -1,   45,   46,   47,   37,   -1,   -1,   -1,   -1,   42,
   43,   -1,   45,   46,   47,   -1,   60,   -1,   62,   -1,
   -1,   -1,   -1,   91,   -1,   -1,   -1,   60,   41,   62,
   -1,   44,   -1,   -1,   41,   -1,   43,   44,   45,   -1,
   -1,   -1,   -1,   -1,   -1,   58,   59,   91,   -1,  265,
   -1,   58,   59,   60,   41,   62,   -1,   44,   91,   -1,
   -1,  277,  278,   -1,   -1,  281,  282,  283,  284,   -1,
   -1,   58,   59,  289,  290,   41,   -1,   43,   44,   45,
   93,   -1,   -1,   -1,   -1,   -1,   93,   -1,   -1,   -1,
   -1,   -1,   58,   59,   60,   -1,   62,   -1,   -1,   -1,
   -1,   41,   -1,   -1,   44,   -1,   93,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   58,   59,
   60,   -1,   62,  265,  266,  267,   -1,   93,   41,   -1,
   -1,   44,   -1,   -1,   -1,  277,  278,   -1,   -1,  281,
  282,  283,  284,   -1,   -1,   58,   59,  289,  290,   41,
   -1,   -1,   44,   93,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  267,   -1,   -1,   -1,   58,   59,   -1,   -1,
   -1,   41,  277,  278,   44,   -1,  281,  282,  283,  284,
   93,   -1,   -1,   -1,  289,  290,   -1,   -1,   58,   59,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   93,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  277,
  278,   -1,   -1,  281,  282,  283,  284,   -1,   -1,   -1,
   -1,  289,  290,   93,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  277,  278,   -1,   -1,  281,  282,  283,
  284,   -1,   -1,   -1,  277,  289,  290,   -1,  281,  282,
  283,  284,  265,  266,  267,   -1,  289,  290,  265,  266,
  267,   -1,   -1,   -1,  277,  278,   -1,   -1,   -1,   -1,
  277,  278,   -1,   -1,  281,  282,  283,  284,  265,  266,
  267,   -1,  289,  290,   -1,   -1,   -1,   -1,   -1,   -1,
  277,  278,   -1,   -1,   -1,   -1,  283,  284,   -1,  265,
  266,  267,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  277,  278,   -1,   -1,  281,  282,  283,  284,   -1,
   -1,   -1,   -1,  289,  290,  265,  266,  267,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  277,  278,   -1,
   -1,  281,  282,  283,  284,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  265,  266,  267,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  277,  278,   -1,   -1,   -1,   58,
  283,  284,   -1,  265,  266,  267,   -1,   66,   67,   68,
   69,   -1,   -1,   -1,   -1,  277,  278,   -1,   -1,   -1,
   -1,  283,  284,   -1,   -1,  265,  266,  267,   -1,   -1,
   -1,   -1,   -1,   92,   -1,   94,   95,  277,  278,   -1,
   -1,   -1,  101,  283,  284,  104,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  119,  120,  121,  122,  123,  124,  125,  126,  127,  128,
  129,  130,  131,   -1,  133,  134,  135,  136,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  145,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  177,   -1,
  179,   -1,   -1,   -1,  183,   -1,   -1,  186,   -1,   -1,
  189,   -1,   -1,   -1,  193,   -1,   -1,  196,   -1,  198,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  210,   -1,   -1,   -1,  214,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  223,   -1,   -1,   -1,   -1,   -1,
  229,
};
}
final static short YYFINAL=3;
final static short YYMAXTOKEN=295;
final static String yyname[] = {
"end-of-file",null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,"'!'",null,null,null,"'%'",null,null,"'('","')'","'*'","'+'",
"','","'-'","'.'","'/'",null,null,null,null,null,null,null,null,null,null,"':'",
"';'","'<'","'='","'>'",null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,"'['",null,"']'",null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,"'{'",null,"'}'",null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,"VOID","BOOL","INT","STRING",
"CLASS","NULL","EXTENDS","THIS","WHILE","FOR","IF","ELSE","RETURN","BREAK",
"NEW","PRINT","READ_INTEGER","READ_LINE","LITERAL","IDENTIFIER","AND","OR",
"STATIC","INSTANCEOF","LESS_EQUAL","GREATER_EQUAL","EQUAL","NOT_EQUAL","SCOPY",
"SEALED","SERIESE_OP","VAR","ORIGIN","DOUBLEPLUS","DEFAULT","IN","FOREACH",
"UMINUS","EMPTY",
};
final static String yyrule[] = {
"$accept : Program",
"Program : ClassList",
"ClassList : ClassList ClassDef",
"ClassList : ClassDef",
"VariableDef : Variable ';'",
"Variable : Type IDENTIFIER",
"Type : INT",
"Type : VOID",
"Type : BOOL",
"Type : STRING",
"Type : CLASS IDENTIFIER",
"Type : Type '[' ']'",
"ClassDef : CLASS IDENTIFIER ExtendsClause '{' FieldList '}'",
"ClassDef : SEALED CLASS IDENTIFIER ExtendsClause '{' FieldList '}'",
"ExtendsClause : EXTENDS IDENTIFIER",
"ExtendsClause :",
"FieldList : FieldList VariableDef",
"FieldList : FieldList FunctionDef",
"FieldList :",
"Formals : VariableList",
"Formals :",
"VariableList : VariableList ',' Variable",
"VariableList : Variable",
"FunctionDef : STATIC Type IDENTIFIER '(' Formals ')' StmtBlock",
"FunctionDef : Type IDENTIFIER '(' Formals ')' StmtBlock",
"StmtBlock : '{' StmtList '}'",
"StmtList : StmtList Stmt",
"StmtList :",
"Stmt : VariableDef",
"Stmt : SimpleStmt ';'",
"Stmt : IfStmt",
"Stmt : WhileStmt",
"Stmt : ForStmt",
"Stmt : ReturnStmt ';'",
"Stmt : PrintStmt ';'",
"Stmt : BreakStmt ';'",
"Stmt : StmtBlock",
"Stmt : OCStmt",
"Stmt : GuardedStmt",
"Stmt : ForeachStmt",
"ForeachStmt : FOREACH '(' BoundVariable IN Expr WhileExpr ')' Stmt",
"WhileExpr : WHILE Expr",
"WhileExpr :",
"BoundVariable : VAR IDENTIFIER",
"BoundVariable : Type IDENTIFIER",
"GuardedStmt : IF '{' IfBranchList '}'",
"IfBranchList : IfBranchList SERIESE_OP IfSubStmt",
"IfBranchList : IfSubStmt",
"IfBranchList :",
"IfSubStmt : Expr ':' Stmt",
"SimpleStmt : LValue '=' Expr",
"SimpleStmt : Call",
"SimpleStmt :",
"Receiver : Expr '.'",
"Receiver :",
"LValue : Receiver IDENTIFIER",
"LValue : Expr '[' Expr ']'",
"LValue : VAR IDENTIFIER",
"Call : Receiver IDENTIFIER '(' Actuals ')'",
"Expr : LValue",
"Expr : Call",
"Expr : Constant",
"Expr : Expr DOUBLEPLUS Expr",
"Expr : Expr '+' Expr",
"Expr : Expr '-' Expr",
"Expr : Expr '*' Expr",
"Expr : Expr '/' Expr",
"Expr : Expr '%' Expr",
"Expr : Expr EQUAL Expr",
"Expr : Expr NOT_EQUAL Expr",
"Expr : Expr '<' Expr",
"Expr : Expr '>' Expr",
"Expr : Expr LESS_EQUAL Expr",
"Expr : Expr GREATER_EQUAL Expr",
"Expr : Expr AND Expr",
"Expr : Expr OR Expr",
"Expr : '(' Expr ')'",
"Expr : '-' Expr",
"Expr : '!' Expr",
"Expr : READ_INTEGER '(' ')'",
"Expr : READ_LINE '(' ')'",
"Expr : THIS",
"Expr : NEW IDENTIFIER '(' ')'",
"Expr : NEW Type '[' Expr ']'",
"Expr : INSTANCEOF '(' Expr ',' IDENTIFIER ')'",
"Expr : '(' CLASS IDENTIFIER ')' Expr",
"Expr : Expr ORIGIN Expr",
"Expr : Expr '[' Expr ':' Expr ']'",
"Expr : Expr '[' Expr ']' DEFAULT Expr",
"Expr : '[' Expr FOR IDENTIFIER IN Expr BoolExpr ']'",
"BoolExpr : IF Expr",
"BoolExpr :",
"Constant : LITERAL",
"Constant : NULL",
"Constant : '[' ConstantList ']'",
"ConstantList : ConstantList ',' Constant",
"ConstantList : Constant",
"ConstantList :",
"Actuals : ExprList",
"Actuals :",
"ExprList : ExprList ',' Expr",
"ExprList : Expr",
"WhileStmt : WHILE '(' Expr ')' Stmt",
"ForStmt : FOR '(' SimpleStmt ';' Expr ';' SimpleStmt ')' Stmt",
"BreakStmt : BREAK",
"IfStmt : IF '(' Expr ')' Stmt ElseClause",
"ElseClause : ELSE Stmt",
"ElseClause :",
"ReturnStmt : RETURN Expr",
"ReturnStmt : RETURN",
"PrintStmt : PRINT '(' ExprList ')'",
"OCStmt : SCOPY '(' IDENTIFIER ',' Expr ')'",
};

//#line 550 "Parser.y"
    
	/**
	 * 閹垫挸宓冭ぐ鎾冲瑜版帞瀹抽幍锟介悽銊ф畱鐠囶厽纭剁憴鍕灟<br>
	 * 鐠囧嘲瀣佹穱顔芥暭閵嗭拷
	 */
    public boolean onReduce(String rule) {
		if (rule.startsWith("$$"))
			return false;
		else
			rule = rule.replaceAll(" \\$\\$\\d+", "");

   	    if (rule.endsWith(":"))
    	    System.out.println(rule + " <empty>");
   	    else
			System.out.println(rule);
		return false;
    }
    
    public void diagnose() {
		addReduceListener(this);
		yyparse();
	}
//#line 821 "Parser.java"
//###############################################################
// method: yylexdebug : check lexer state
//###############################################################
void yylexdebug(int state,int ch)
{
String s=null;
  if (ch < 0) ch=0;
  if (ch <= YYMAXTOKEN) //check index bounds
     s = yyname[ch];    //now get it
  if (s==null)
    s = "illegal-symbol";
  debug("state "+state+", reading "+ch+" ("+s+")");
}





//The following are now global, to aid in error reporting
int yyn;       //next next thing to do
int yym;       //
int yystate;   //current parsing state from state table
String yys;    //current token string


//###############################################################
// method: yyparse : parse input and execute indicated items
//###############################################################
int yyparse()
{
boolean doaction;
  init_stacks();
  yynerrs = 0;
  yyerrflag = 0;
  yychar = -1;          //impossible char forces a read
  yystate=0;            //initial state
  state_push(yystate);  //save it
  while (true) //until parsing is done, either correctly, or w/error
    {
    doaction=true;
    //if (yydebug) debug("loop"); 
    //#### NEXT ACTION (from reduction table)
    for (yyn=yydefred[yystate];yyn==0;yyn=yydefred[yystate])
      {
      //if (yydebug) debug("yyn:"+yyn+"  state:"+yystate+"  yychar:"+yychar);
      if (yychar < 0)      //we want a char?
        {
        yychar = yylex();  //get next token
        //if (yydebug) debug(" next yychar:"+yychar);
        //#### ERROR CHECK ####
        //if (yychar < 0)    //it it didn't work/error
        //  {
        //  yychar = 0;      //change it to default string (no -1!)
          //if (yydebug)
          //  yylexdebug(yystate,yychar);
        //  }
        }//yychar<0
      yyn = yysindex[yystate];  //get amount to shift by (shift index)
      if ((yyn != 0) && (yyn += yychar) >= 0 &&
          yyn <= YYTABLESIZE && yycheck[yyn] == yychar)
        {
        //if (yydebug)
          //debug("state "+yystate+", shifting to state "+yytable[yyn]);
        //#### NEXT STATE ####
        yystate = yytable[yyn];//we are in a new state
        state_push(yystate);   //save it
        val_push(yylval);      //push our lval as the input for next rule
        yychar = -1;           //since we have 'eaten' a token, say we need another
        if (yyerrflag > 0)     //have we recovered an error?
           --yyerrflag;        //give ourselves credit
        doaction=false;        //but don't process yet
        break;   //quit the yyn=0 loop
        }

    yyn = yyrindex[yystate];  //reduce
    if ((yyn !=0 ) && (yyn += yychar) >= 0 &&
            yyn <= YYTABLESIZE && yycheck[yyn] == yychar)
      {   //we reduced!
      //if (yydebug) debug("reduce");
      yyn = yytable[yyn];
      doaction=true; //get ready to execute
      break;         //drop down to actions
      }
    else //ERROR RECOVERY
      {
      if (yyerrflag==0)
        {
        yyerror("syntax error");
        yynerrs++;
        }
      if (yyerrflag < 3) //low error count?
        {
        yyerrflag = 3;
        while (true)   //do until break
          {
          if (stateptr<0 || valptr<0)   //check for under & overflow here
            {
            return 1;
            }
          yyn = yysindex[state_peek(0)];
          if ((yyn != 0) && (yyn += YYERRCODE) >= 0 &&
                    yyn <= YYTABLESIZE && yycheck[yyn] == YYERRCODE)
            {
            //if (yydebug)
              //debug("state "+state_peek(0)+", error recovery shifting to state "+yytable[yyn]+" ");
            yystate = yytable[yyn];
            state_push(yystate);
            val_push(yylval);
            doaction=false;
            break;
            }
          else
            {
            //if (yydebug)
              //debug("error recovery discarding state "+state_peek(0)+" ");
            if (stateptr<0 || valptr<0)   //check for under & overflow here
              {
              return 1;
              }
            state_pop();
            val_pop();
            }
          }
        }
      else            //discard this token
        {
        if (yychar == 0)
          return 1; //yyabort
        //if (yydebug)
          //{
          //yys = null;
          //if (yychar <= YYMAXTOKEN) yys = yyname[yychar];
          //if (yys == null) yys = "illegal-symbol";
          //debug("state "+yystate+", error recovery discards token "+yychar+" ("+yys+")");
          //}
        yychar = -1;  //read another
        }
      }//end error recovery
    }//yyn=0 loop
    if (!doaction)   //any reason not to proceed?
      continue;      //skip action
    yym = yylen[yyn];          //get count of terminals on rhs
    //if (yydebug)
      //debug("state "+yystate+", reducing "+yym+" by rule "+yyn+" ("+yyrule[yyn]+")");
    if (yym>0)                 //if count of rhs not 'nil'
      yyval = val_peek(yym-1); //get current semantic value
    if (reduceListener == null || reduceListener.onReduce(yyrule[yyn])) // if intercepted!
      switch(yyn)
      {
//########## USER-SUPPLIED ACTIONS ##########
case 1:
//#line 64 "Parser.y"
{
						tree = new Tree.TopLevel(val_peek(0).clist, val_peek(0).loc);
					}
break;
case 2:
//#line 70 "Parser.y"
{
						yyval.clist.add(val_peek(0).cdef);
					}
break;
case 3:
//#line 74 "Parser.y"
{
                		yyval.clist = new ArrayList<Tree.ClassDef>();
                		yyval.clist.add(val_peek(0).cdef);
                	}
break;
case 5:
//#line 84 "Parser.y"
{
						yyval.vdef = new Tree.VarDef(val_peek(0).ident, val_peek(1).type, val_peek(0).loc);
					}
break;
case 6:
//#line 90 "Parser.y"
{
						yyval.type = new Tree.TypeIdent(Tree.INT, val_peek(0).loc);
					}
break;
case 7:
//#line 94 "Parser.y"
{
                		yyval.type = new Tree.TypeIdent(Tree.VOID, val_peek(0).loc);
                	}
break;
case 8:
//#line 98 "Parser.y"
{
                		yyval.type = new Tree.TypeIdent(Tree.BOOL, val_peek(0).loc);
                	}
break;
case 9:
//#line 102 "Parser.y"
{
                		yyval.type = new Tree.TypeIdent(Tree.STRING, val_peek(0).loc);
                	}
break;
case 10:
//#line 106 "Parser.y"
{
                		yyval.type = new Tree.TypeClass(val_peek(0).ident, val_peek(1).loc);
                	}
break;
case 11:
//#line 110 "Parser.y"
{
                		yyval.type = new Tree.TypeArray(val_peek(2).type, val_peek(2).loc);
                	}
break;
case 12:
//#line 116 "Parser.y"
{
						yyval.cdef = new Tree.ClassDef(val_peek(4).ident, val_peek(3).ident, val_peek(1).flist, val_peek(5).loc);
					}
break;
case 13:
//#line 120 "Parser.y"
{
						yyval.cdef = new Tree.SealedClassDef(val_peek(4).ident, val_peek(3).ident, val_peek(1).flist, val_peek(5).loc);
					}
break;
case 14:
//#line 126 "Parser.y"
{
						yyval.ident = val_peek(0).ident;
					}
break;
case 15:
//#line 130 "Parser.y"
{
                		yyval = new SemValue();
                	}
break;
case 16:
//#line 136 "Parser.y"
{
						yyval.flist.add(val_peek(0).vdef);
					}
break;
case 17:
//#line 140 "Parser.y"
{
						yyval.flist.add(val_peek(0).fdef);
					}
break;
case 18:
//#line 144 "Parser.y"
{
                		yyval = new SemValue();
                		yyval.flist = new ArrayList<Tree>();
                	}
break;
case 20:
//#line 152 "Parser.y"
{
                		yyval = new SemValue();
                		yyval.vlist = new ArrayList<Tree.VarDef>(); 
                	}
break;
case 21:
//#line 159 "Parser.y"
{
						yyval.vlist.add(val_peek(0).vdef);
					}
break;
case 22:
//#line 163 "Parser.y"
{
                		yyval.vlist = new ArrayList<Tree.VarDef>();
						yyval.vlist.add(val_peek(0).vdef);
                	}
break;
case 23:
//#line 170 "Parser.y"
{
						yyval.fdef = new MethodDef(true, val_peek(4).ident, val_peek(5).type, val_peek(2).vlist, (Block) val_peek(0).stmt, val_peek(4).loc);
					}
break;
case 24:
//#line 174 "Parser.y"
{
						yyval.fdef = new MethodDef(false, val_peek(4).ident, val_peek(5).type, val_peek(2).vlist, (Block) val_peek(0).stmt, val_peek(4).loc);
					}
break;
case 25:
//#line 180 "Parser.y"
{
						yyval.stmt = new Block(val_peek(1).slist, val_peek(2).loc);
					}
break;
case 26:
//#line 186 "Parser.y"
{
						yyval.slist.add(val_peek(0).stmt);
					}
break;
case 27:
//#line 190 "Parser.y"
{
                		yyval = new SemValue();
                		yyval.slist = new ArrayList<Tree>();
                	}
break;
case 28:
//#line 197 "Parser.y"
{
						yyval.stmt = val_peek(0).vdef;
					}
break;
case 29:
//#line 202 "Parser.y"
{
                		if (yyval.stmt == null) {
                			yyval.stmt = new Tree.Skip(val_peek(0).loc);
                		}
                	}
break;
case 40:
//#line 220 "Parser.y"
{
						yyval.stmt = new Tree.ForeachStmt(val_peek(5).lvalue, val_peek(3).expr, val_peek(2).expr, val_peek(0).stmt, val_peek(7).loc);
					}
break;
case 41:
//#line 225 "Parser.y"
{
						yyval.expr = val_peek(0).expr;
					}
break;
case 42:
//#line 229 "Parser.y"
{
						yyval = new SemValue();
					}
break;
case 43:
//#line 234 "Parser.y"
{
						yyval.lvalue = new Tree.NormalStmt(val_peek(0).ident,null, val_peek(1).loc);
					}
break;
case 44:
//#line 238 "Parser.y"
{
						yyval.lvalue = new Tree.NormalStmt(val_peek(0).ident,val_peek(1).type, val_peek(1).loc);
					}
break;
case 45:
//#line 243 "Parser.y"
{
						yyval.stmt = new Tree.GuardedStmt(val_peek(1).slist, val_peek(3).loc);
					}
break;
case 46:
//#line 249 "Parser.y"
{
						yyval.slist.add(val_peek(0).stmt);
					}
break;
case 47:
//#line 253 "Parser.y"
{
						yyval.slist = new ArrayList<Tree>();
						yyval.slist.add(val_peek(0).stmt);
					}
break;
case 48:
//#line 258 "Parser.y"
{
						yyval = new SemValue();
						yyval.slist = new ArrayList<Tree>();
					}
break;
case 49:
//#line 265 "Parser.y"
{
						yyval.stmt = new Tree.IfSubStmt(val_peek(2).expr, val_peek(0).stmt, val_peek(2).loc);
					}
break;
case 50:
//#line 272 "Parser.y"
{
						yyval.stmt = new Tree.Assign(val_peek(2).lvalue, val_peek(0).expr, val_peek(1).loc);
					}
break;
case 51:
//#line 276 "Parser.y"
{
                		yyval.stmt = new Tree.Exec(val_peek(0).expr, val_peek(0).loc);
                	}
break;
case 52:
//#line 280 "Parser.y"
{
                		yyval = new SemValue();
                	}
break;
case 54:
//#line 287 "Parser.y"
{
                		yyval = new SemValue();
                	}
break;
case 55:
//#line 293 "Parser.y"
{
						yyval.lvalue = new Tree.Ident(val_peek(1).expr, val_peek(0).ident, val_peek(0).loc);
						if (val_peek(1).loc == null) {
							yyval.loc = val_peek(0).loc;
						}
					}
break;
case 56:
//#line 300 "Parser.y"
{
                		yyval.lvalue = new Tree.Indexed(val_peek(3).expr, val_peek(1).expr, val_peek(3).loc);
                	}
break;
case 57:
//#line 304 "Parser.y"
{
                		yyval.lvalue = new Tree.VarStmt(val_peek(0).ident,val_peek(0).loc);
                	}
break;
case 58:
//#line 310 "Parser.y"
{
						yyval.expr = new Tree.CallExpr(val_peek(4).expr, val_peek(3).ident, val_peek(1).elist, val_peek(3).loc);
						if (val_peek(4).loc == null) {
							yyval.loc = val_peek(3).loc;
						}
					}
break;
case 59:
//#line 319 "Parser.y"
{
						yyval.expr = val_peek(0).lvalue;
					}
break;
case 62:
//#line 325 "Parser.y"
{
                		yyval.expr = new Tree.DoublePlus(val_peek(2).expr, val_peek(0).expr, val_peek(1).loc);
                	}
break;
case 63:
//#line 329 "Parser.y"
{
                		yyval.expr = new Tree.Binary(Tree.PLUS, val_peek(2).expr, val_peek(0).expr, val_peek(1).loc);
                	}
break;
case 64:
//#line 333 "Parser.y"
{
                		yyval.expr = new Tree.Binary(Tree.MINUS, val_peek(2).expr, val_peek(0).expr, val_peek(1).loc);
                	}
break;
case 65:
//#line 337 "Parser.y"
{
                		yyval.expr = new Tree.Binary(Tree.MUL, val_peek(2).expr, val_peek(0).expr, val_peek(1).loc);
                	}
break;
case 66:
//#line 341 "Parser.y"
{
                		yyval.expr = new Tree.Binary(Tree.DIV, val_peek(2).expr, val_peek(0).expr, val_peek(1).loc);
                	}
break;
case 67:
//#line 345 "Parser.y"
{
                		yyval.expr = new Tree.Binary(Tree.MOD, val_peek(2).expr, val_peek(0).expr, val_peek(1).loc);
                	}
break;
case 68:
//#line 349 "Parser.y"
{
                		yyval.expr = new Tree.Binary(Tree.EQ, val_peek(2).expr, val_peek(0).expr, val_peek(1).loc);
                	}
break;
case 69:
//#line 353 "Parser.y"
{
                		yyval.expr = new Tree.Binary(Tree.NE, val_peek(2).expr, val_peek(0).expr, val_peek(1).loc);
                	}
break;
case 70:
//#line 357 "Parser.y"
{
                		yyval.expr = new Tree.Binary(Tree.LT, val_peek(2).expr, val_peek(0).expr, val_peek(1).loc);
                	}
break;
case 71:
//#line 361 "Parser.y"
{
                		yyval.expr = new Tree.Binary(Tree.GT, val_peek(2).expr, val_peek(0).expr, val_peek(1).loc);
                	}
break;
case 72:
//#line 365 "Parser.y"
{
                		yyval.expr = new Tree.Binary(Tree.LE, val_peek(2).expr, val_peek(0).expr, val_peek(1).loc);
                	}
break;
case 73:
//#line 369 "Parser.y"
{
                		yyval.expr = new Tree.Binary(Tree.GE, val_peek(2).expr, val_peek(0).expr, val_peek(1).loc);
                	}
break;
case 74:
//#line 373 "Parser.y"
{
                		yyval.expr = new Tree.Binary(Tree.AND, val_peek(2).expr, val_peek(0).expr, val_peek(1).loc);
                	}
break;
case 75:
//#line 377 "Parser.y"
{
                		yyval.expr = new Tree.Binary(Tree.OR, val_peek(2).expr, val_peek(0).expr, val_peek(1).loc);
                	}
break;
case 76:
//#line 381 "Parser.y"
{
                		yyval = val_peek(1);
                	}
break;
case 77:
//#line 385 "Parser.y"
{
                		yyval.expr = new Tree.Unary(Tree.NEG, val_peek(0).expr, val_peek(1).loc);
                	}
break;
case 78:
//#line 389 "Parser.y"
{
                		yyval.expr = new Tree.Unary(Tree.NOT, val_peek(0).expr, val_peek(1).loc);
                	}
break;
case 79:
//#line 393 "Parser.y"
{
                		yyval.expr = new Tree.ReadIntExpr(val_peek(2).loc);
                	}
break;
case 80:
//#line 397 "Parser.y"
{
                		yyval.expr = new Tree.ReadLineExpr(val_peek(2).loc);
                	}
break;
case 81:
//#line 401 "Parser.y"
{
                		yyval.expr = new Tree.ThisExpr(val_peek(0).loc);
                	}
break;
case 82:
//#line 405 "Parser.y"
{
                		yyval.expr = new Tree.NewClass(val_peek(2).ident, val_peek(3).loc);
                	}
break;
case 83:
//#line 409 "Parser.y"
{
                		yyval.expr = new Tree.NewArray(val_peek(3).type, val_peek(1).expr, val_peek(4).loc);
                	}
break;
case 84:
//#line 413 "Parser.y"
{
                		yyval.expr = new Tree.TypeTest(val_peek(3).expr, val_peek(1).ident, val_peek(5).loc);
                	}
break;
case 85:
//#line 417 "Parser.y"
{
                		yyval.expr = new Tree.TypeCast(val_peek(2).ident, val_peek(0).expr, val_peek(0).loc);
                	}
break;
case 86:
//#line 421 "Parser.y"
{
                		yyval.expr = new Tree.InitArray(val_peek(2).expr, val_peek(0).expr, val_peek(1).loc);
                	}
break;
case 87:
//#line 425 "Parser.y"
{	
                		yyval.expr = new Tree.GetSubArray(val_peek(5).expr, val_peek(3).expr, val_peek(1).expr, val_peek(5).loc);
                	}
break;
case 88:
//#line 429 "Parser.y"
{
                		yyval.expr = new Tree.Default(val_peek(5).expr, val_peek(3).expr, val_peek(0).expr, val_peek(1).loc);
                	}
break;
case 89:
//#line 433 "Parser.y"
{
                		yyval.expr = new Tree.In(val_peek(6).expr,val_peek(4).ident,val_peek(2).expr,val_peek(1).expr,val_peek(7).loc);
                	}
break;
case 90:
//#line 438 "Parser.y"
{
						yyval.expr = val_peek(0).expr;
					}
break;
case 91:
//#line 442 "Parser.y"
{
						yyval = new SemValue();
					}
break;
case 92:
//#line 447 "Parser.y"
{
						yyval.expr = new Tree.Literal(val_peek(0).typeTag, val_peek(0).literal, val_peek(0).loc);
					}
break;
case 93:
//#line 451 "Parser.y"
{
						yyval.expr = new Null(val_peek(0).loc);
					}
break;
case 94:
//#line 455 "Parser.y"
{
						yyval.expr = new Tree.Const_Array(val_peek(1).elist, val_peek(2).loc);	
					}
break;
case 95:
//#line 461 "Parser.y"
{	
						yyval.elist.add(val_peek(0).expr);
					}
break;
case 96:
//#line 465 "Parser.y"
{	
                		yyval.elist = new ArrayList<Tree.Expr>();
						yyval.elist.add(val_peek(0).expr);
					}
break;
case 97:
//#line 470 "Parser.y"
{
						yyval = new SemValue();
						yyval.elist = new ArrayList<Tree.Expr>();
					}
break;
case 99:
//#line 478 "Parser.y"
{
                		yyval = new SemValue();
                		yyval.elist = new ArrayList<Tree.Expr>();
                	}
break;
case 100:
//#line 485 "Parser.y"
{
						yyval.elist.add(val_peek(0).expr);
					}
break;
case 101:
//#line 489 "Parser.y"
{
                		yyval.elist = new ArrayList<Tree.Expr>();
						yyval.elist.add(val_peek(0).expr);
                	}
break;
case 102:
//#line 496 "Parser.y"
{
						yyval.stmt = new Tree.WhileLoop(val_peek(2).expr, val_peek(0).stmt, val_peek(4).loc);
					}
break;
case 103:
//#line 502 "Parser.y"
{
						yyval.stmt = new Tree.ForLoop(val_peek(6).stmt, val_peek(4).expr, val_peek(2).stmt, val_peek(0).stmt, val_peek(8).loc);
					}
break;
case 104:
//#line 508 "Parser.y"
{
						yyval.stmt = new Tree.Break(val_peek(0).loc);
					}
break;
case 105:
//#line 514 "Parser.y"
{
						yyval.stmt = new Tree.If(val_peek(3).expr, val_peek(1).stmt, val_peek(0).stmt, val_peek(5).loc);
					}
break;
case 106:
//#line 520 "Parser.y"
{
						yyval.stmt = val_peek(0).stmt;
					}
break;
case 107:
//#line 524 "Parser.y"
{
						yyval = new SemValue();
					}
break;
case 108:
//#line 530 "Parser.y"
{
						yyval.stmt = new Tree.Return(val_peek(0).expr, val_peek(1).loc);
					}
break;
case 109:
//#line 534 "Parser.y"
{
                		yyval.stmt = new Tree.Return(null, val_peek(0).loc);
                	}
break;
case 110:
//#line 540 "Parser.y"
{
						yyval.stmt = new Print(val_peek(1).elist, val_peek(3).loc);
					}
break;
case 111:
//#line 546 "Parser.y"
{
						yyval.stmt = new Tree.Scopy(val_peek(3).ident, val_peek(1).expr, val_peek(5).loc);
					}
break;
//#line 1556 "Parser.java"
//########## END OF USER-SUPPLIED ACTIONS ##########
    }//switch
    //#### Now let's reduce... ####
    //if (yydebug) debug("reduce");
    state_drop(yym);             //we just reduced yylen states
    yystate = state_peek(0);     //get new state
    val_drop(yym);               //corresponding value drop
    yym = yylhs[yyn];            //select next TERMINAL(on lhs)
    if (yystate == 0 && yym == 0)//done? 'rest' state and at first TERMINAL
      {
      //if (yydebug) debug("After reduction, shifting from state 0 to state "+YYFINAL+"");
      yystate = YYFINAL;         //explicitly say we're done
      state_push(YYFINAL);       //and save it
      val_push(yyval);           //also save the semantic value of parsing
      if (yychar < 0)            //we want another character?
        {
        yychar = yylex();        //get next character
        //if (yychar<0) yychar=0;  //clean, if necessary
        //if (yydebug)
          //yylexdebug(yystate,yychar);
        }
      if (yychar == 0)          //Good exit (if lex returns 0 ;-)
         break;                 //quit the loop--all DONE
      }//if yystate
    else                        //else not done yet
      {                         //get next state and push, for next yydefred[]
      yyn = yygindex[yym];      //find out where to go
      if ((yyn != 0) && (yyn += yystate) >= 0 &&
            yyn <= YYTABLESIZE && yycheck[yyn] == yystate)
        yystate = yytable[yyn]; //get new state
      else
        yystate = yydgoto[yym]; //else go to new defred
      //if (yydebug) debug("after reduction, shifting from state "+state_peek(0)+" to state "+yystate+"");
      state_push(yystate);     //going again, so push state & val...
      val_push(yyval);         //for next action
      }
    }//main loop
  return 0;//yyaccept!!
}
//## end of method parse() ######################################



//## run() --- for Thread #######################################
//## The -Jnorun option was used ##
//## end of method run() ########################################



//## Constructors ###############################################
//## The -Jnoconstruct option was used ##
//###############################################################



}
//################### END OF CLASS ##############################
